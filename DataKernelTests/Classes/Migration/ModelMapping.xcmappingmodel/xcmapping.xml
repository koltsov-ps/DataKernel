<?xml version="1.0" standalone="yes"?>
<!DOCTYPE database SYSTEM "file:///System/Library/DTDs/CoreData.dtd">

<database>
    <databaseInfo>
        <version>134481920</version>
        <UUID>4B210C03-0ABD-47BA-8A77-9FD842F56CCC</UUID>
        <nextObjectID>105</nextObjectID>
        <metadata>
            <plist version="1.0">
                <dict>
                    <key>NSPersistenceFrameworkVersion</key>
                    <integer>754</integer>
                    <key>NSStoreModelVersionHashes</key>
                    <dict>
                        <key>XDDevAttributeMapping</key>
                        <data>
		0plcXXRN7XHKl5CcF+fwriFmUpON3ZtcI/AfK748aWc=
		</data>
                        <key>XDDevEntityMapping</key>
                        <data>
		qeN1Ym3TkWN1G6dU9RfX6Kd2ccEvcDVWHpd3LpLgboI=
		</data>
                        <key>XDDevMappingModel</key>
                        <data>
		EqtMzvRnVZWkXwBHu4VeVGy8UyoOe+bi67KC79kphlQ=
		</data>
                        <key>XDDevPropertyMapping</key>
                        <data>
		XN33V44TTGY4JETlMoOB5yyTKxB+u4slvDIinv0rtGA=
		</data>
                        <key>XDDevRelationshipMapping</key>
                        <data>
		akYY9LhehVA/mCb4ATLWuI9XGLcjpm14wWL1oEBtIcs=
		</data>
                    </dict>
                    <key>NSStoreModelVersionHashesVersion</key>
                    <integer>3</integer>
                    <key>NSStoreModelVersionIdentifiers</key>
                    <array>
                        <string></string>
                    </array>
                </dict>
            </plist>
        </metadata>
    </databaseInfo>
    <object type="XDDEVMAPPINGMODEL" id="z102">
        <attribute name="sourcemodelpath" type="string">DataKernelTests/Classes/Migration/Model.xcdatamodeld/Model 2.xcdatamodel</attribute>
        <attribute name="sourcemodeldata" type="binary">YnBsaXN0MDDUAAEAAgADAAQABQAGAugC6VgkdmVyc2lvblgkb2JqZWN0c1kkYXJjaGl2ZXJUJHRv
cBIAAYagrxBnAAcACAAXADMANAA1AD0APgBZAFoAWwBhAGIAbgCEAIUAhgCHAIgAiQCKAIsAjACNAKYAqQCwALYAxQDGANUA2ADnAPYA+QBYAQkBGAEcASABLwE1ATYBPgFNAU4BVwFdAV4BcwF0AXwBfQF+AYoBngGfAaABoQGiAaMBpAGlAaYBtQHEAdMB1wHmAfUB9gIFAhQCFQIkAjACQgJDAkQCRQJGAkcCSAJJAlgCZwJ2AoUChgKVAqQCswK7ArwCvwLIAswC0ALUAtwC3wLjAuRVJG51bGzXAAkACgALAAwADQAOAA8AEAARABIAEwAUABMAFl8QD194ZF9yb290UGFja2FnZVYkY2xhc3NcX3hkX2NvbW1lbnRzXxAQX3hkX21vZGVsTWFuYWdlcl8QFV9jb25maWd1cmF0aW9uc0J5TmFtZV1feGRfbW9kZWxOYW1lXxAXX21vZGVsVmVyc2lvbklkZW50aWZpZXKAAoBmgGOAAIBkgACAZd4AGAAZABoAGwAcAB0AHgAKAB8AIAAhACIAIwAkACUAJgAnACgAJQATACsALAAtAC4ALwAlACUAE18QHFhEQnVja2V0Rm9yQ2xhc3Nlc3dhc0VuY29kZWRfEBpYREJ1Y2tldEZvclBhY2thZ2Vzc3RvcmFnZV8QHFhEQnVja2V0Rm9ySW50ZXJmYWNlc3N0b3JhZ2VfEA9feGRfb3duaW5nTW9kZWxfEB1YREJ1Y2tldEZvclBhY2thZ2Vzd2FzRW5jb2RlZFZfb3duZXJfEBtYREJ1Y2tldEZvckRhdGFUeXBlc3N0b3JhZ2VbX3Zpc2liaWxpdHlfEBlYREJ1Y2tldEZvckNsYXNzZXNzdG9yYWdlVV9uYW1lXxAfWERCdWNrZXRGb3JJbnRlcmZhY2Vzd2FzRW5jb2RlZF8QHlhEQnVja2V0Rm9yRGF0YVR5cGVzd2FzRW5jb2RlZF8QEF91bmlxdWVFbGVtZW50SUSABIBhgF+AAYAEgACAYIBiEACABYADgASABIAAUFNZRVPTADYANwAKADgAOgA8V05TLmtleXNaTlMub2JqZWN0c6EAOYAGoQA7gAeAJlxQZXJzb25FbnRpdHnfEBAAPwBAAEEAQgAdAEMARAAfAEUARgAKACEARwBIACQASQBKAEsAJQAlABAATwBQAC0AJQBKAFMAOQBKAFYAVwBYXxAhWERCdWNrZXRGb3JPd25lZEF0dHJpYnV0ZXNvcmRlcmVkXxAhWERCdWNrZXRGb3JPd25lZEF0dHJpYnV0ZXNzdG9yYWdlXxAgWERCdWNrZXRGb3JTdGVyZW90eXBlc3dhc0VuY29kZWRfECRYREJ1Y2tldEZvck93bmVkQXR0cmlidXRlc3dhc0VuY29kZWRfEB1YREJ1Y2tldEZvclN0ZXJlb3R5cGVzc3RvcmFnZV8QJFhEQnVja2V0Rm9yR2VuZXJhbGl6YXRpb25zZHVwbGljYXRlc18QJFhEQnVja2V0Rm9yR2VuZXJhbGl6YXRpb25zd2FzRW5jb2RlZF8QHVhEQnVja2V0Rm9yU3RlcmVvdHlwZXNvcmRlcmVkXxAhWERCdWNrZXRGb3JHZW5lcmFsaXphdGlvbnNvcmRlcmVkXxAhWERCdWNrZXRGb3JHZW5lcmFsaXphdGlvbnNzdG9yYWdlW19pc0Fic3RyYWN0gAmALoAEgASAAoAKgFyABIAJgF6ABoAJgF2ACAgSsAOmlldvcmRlcmVk0wA2ADcACgBcAF4APKEAXYALoQBfgAyAJl5YRF9QU3RlcmVvdHlwZdkAHQAhAGMACgAkAGQAHwBJAGUAOwBdAEoAaQATACUALQBYAG1fECFYREJ1Y2tldEZvck93bmVkQXR0cmlidXRlc29yZGVyZWRfECRYREJ1Y2tldEZvck93bmVkQXR0cmlidXRlc3dhc0VuY29kZWRfECFYREJ1Y2tldEZvck93bmVkQXR0cmlidXRlc3N0b3JhZ2WAB4ALgAmALYAAgAQIgA3TADYANwAKAG8AeQA8qQBwAHEAcgBzAHQAdQB2AHcAeIAOgA+AEIARgBKAE4AUgBWAFqkAegB7AHwAfQB+AH8AgACBAIKAF4AbgB2AH4AggCKAJIAngCuAJl8QE1hEUE1Db21wb3VuZEluZGV4ZXNfEBBYRF9QU0tfZWxlbWVudElEXxAZWERQTVVuaXF1ZW5lc3NDb25zdHJhaW50c18QGlhEX1BTS192ZXJzaW9uSGFzaE1vZGlmaWVyXxAZWERfUFNLX2ZldGNoUmVxdWVzdHNBcnJheV8QEVhEX1BTS19pc0Fic3RyYWN0XxAPWERfUFNLX3VzZXJJbmZvXxATWERfUFNLX2NsYXNzTWFwcGlu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oIAZ0wA2ADcACgLgAuEAPKCggCZQ0gCqAKsC5QLmWVhEUE1Nb2RlbKMC5QLnAK9XWERNb2RlbF8QD05TS2V5ZWRBcmNoaXZlctEC6gAoVHJvb3SAAQAIABkAIgArADUAOgA/ARABFgEzAUUBTAFZAWwBhAGSAawBrgGwAbIBtAG2AbgBugHzAhICLwJOAmACgAKHAqUCsQLNAtMC9QMWAykDKwMtAy8DMQMzAzUDNwM5AzsDPQM/A0EDQwNFA0YDSgNXA18DagNtA28DcgN0A3YDgwPGA+oEDgQxBFgEeASfBMYE5gUKBS4FOgU8BT4FQAVCBUQFRgVIBUoFTAVOBVAFUgVUBVYFVwVcBWQFcQV0BXYFeQV7BX0FjAWxBdUF/AYgBiIGJAYmBigGKgYsBi0GLwY8Bk8GUQZTBlUGVwZZBlsGXQZfBmEGdAZ2BngGegZ8Bn4GgAaCBoQGhgaIBp4GsQbNBuoHBgcaBywHQgdbB5oHoAepB7YHwgfMB9YH4QfsB/kIAQgDCAUIBwgJCAoICwgMCA0IDwgRCBIIEwgVCBYIHwggCCIIKwg2CD8ITghVCF0IZghvCIIIiwieCLUIxwkGCQgJCgkMCQ4JDwkQCREJEgkUCRYJFwkYCRoJGwkmCWUJZwlpCWsJbQluCW8JcAlxCXMJdQl2CXcJeQl6CYMJhAmGCcUJxwnJCcsJzQnOCc8J0AnRCdMJ1QnWCdcJ2QnaChkKGwodCh8KIQoiCiMKJAolCicKKQoqCisKLQouCjcKOAo6CnkKewp9Cn8KgQqCCoMKhAqFCocKiQqKCosKjQqOCo8KzgrQCtIK1ArWCtcK2ArZCtoK3AreCt8K4AriCuMK8ArxCvIK9Ar9CxMLGgsnC2YLaAtqC2wLbgtvC3ALcQtyC3QLdgt3C3gLegt7C5QLlguYC5oLmwudC7QLvQvLC9gL5gv7DA8MJgw4DHcMeQx7DH0MfwyADIEMggyDDIUMhwyIDIkMiwyMDJkMogy3DMYM2wzpDP4NEg0pDTsNSA1LDU0NUA1SDVQNXQ2oDcsN6w4LDg0ODw4RDhMOFQ4WDhcOGQ4aDhwOHQ4fDiEOIg4jDiUOJg4rDjgOPQ4/DkEORg5IDkoOTA5hDnYOmw6/DuYPCg8MDw4PEA8SDxQPFg8XDxkPJg83DzkPOw89Dz8PQQ9DD0UPRw9YD1oPXA9eD2APYg9kD2YPaA9qD4gPpg+5D80P4g//EBMQKRBoEGoQbBBuEHAQcRByEHMQdBB2EHgQeRB6EHwQfRC8EL4QwBDCEMQQxRDGEMcQyBDKEMwQzRDOENAQ0REQERIRFBEWERgRGREaERsRHBEeESARIREiESQRJREyETMRNBE2EXURdxF5EXsRfRF+EX8RgBGBEYMRhRGGEYcRiRGKEckRyxHNEc8R0RHSEdMR1BHVEdcR2RHaEdsR3RHeEd8SHhIgEiISJBImEicSKBIpEioSLBIuEi8SMBIyEjMSchJ0EnYSeBJ6EnsSfBJ9En4SgBKCEoMShBKGEocSjBLLEs0SzxLREtMS1BLVEtYS1xLZEtsS3BLdEt8S4BMFEykTUBN0E3YTeBN6E3wTfhOAE4ETgxOQE58ToROjE6UTpxOpE6sTrRO8E74TwBPCE8QTxhPIE8oTzBPsFBcUMRRKFGQUhBSnFOYU6BTqFOwU7hTvFPAU8RTyFPQU9hT3FPgU+hT7FToVPBU+FUAVQhVDFUQVRRVGFUgVShVLFUwVThVPFY4VkBWSFZQVlhWXFZgVmRWaFZwVnhWfFaAVohWjFeIV5BXmFegV6hXrFewV7RXuFfAV8hXzFfQV9hX3FfoWORY7Fj0WPxZBFkIWQxZEFkUWRxZJFkoWSxZNFk4WjRaPFpEWkxaVFpYWlxaYFpkWmxadFp4WnxahFqIW4RbjFuUW5xbpFuoW6xbsFu0W7xbxFvIW8xb1FvYW/xcNFxoXKBc1F0gXXxdxF3wXhReGF4gXkRecF6sXthfEF9kX7RgEGBYYIxgkGCUYJxg0GDUYNhg4GEUYRhhHGEkYUhhhGG4YfRiPGKMYuhjMGNUY1hjYGOUY5hjnGOkY6hjzGP0ZBBkMGR4ZIxkoAAAAAAAAAgIAAAAAAAAC7AAAAAAAAAAAAAAAAAAAGSo=
</attribute>
        <attribute name="destinationmodelpath" type="string">DataKernelTests/Classes/Migration/Model.xcdatamodeld/Model 3.xcdatamodel</attribute>
        <attribute name="destinationmodeldata" type="binary">YnBsaXN0MDDUAAEAAgADAAQABQAGBCoEK1gkdmVyc2lvblgkb2JqZWN0c1kkYXJjaGl2ZXJUJHRv

</attribute>
        <relationship name="entitymappings" type="0/0" destination="XDDEVENTITYMAPPING" idrefs="z103"></relationship>
    </object>
    <object type="XDDEVENTITYMAPPING" id="z103">
        <attribute name="migrationpolicyclassname" type="string">TestModelV2ToV3Mapping</attribute>
        <attribute name="sourcename" type="string">PersonEntity</attribute>
        <attribute name="mappingtypename" type="string">Undefined</attribute>
        <attribute name="mappingnumber" type="int16">1</attribute>
        <attribute name="destinationname" type="string">PersonEntity</attribute>
        <attribute name="autogenerateexpression" type="bool">1</attribute>
        <relationship name="mappingmodel" type="1/1" destination="XDDEVMAPPINGMODEL" idrefs="z102"></relationship>
        <relationship name="attributemappings" type="0/0" destination="XDDEVATTRIBUTEMAPPING" idrefs="z105 z104"></relationship>
        <relationship name="relationshipmappings" type="0/0" destination="XDDEVRELATIONSHIPMAPPING"></relationship>
    </object>
    <object type="XDDEVATTRIBUTEMAPPING" id="z104">
        <attribute name="name" type="string">firstName</attribute>
        <relationship name="entitymapping" type="1/1" destination="XDDEVENTITYMAPPING" idrefs="z103"></relationship>
    </object>
    <object type="XDDEVATTRIBUTEMAPPING" id="z105">
        <attribute name="name" type="string">lastName</attribute>
        <relationship name="entitymapping" type="1/1" destination="XDDEVENTITYMAPPING" idrefs="z103"></relationship>
    </object>
</database>